{"version":3,"sources":["webpack:///./node_modules/semantic-ui-react/dist/es/views/Comment/CommentAction.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Comment/CommentActions.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Comment/CommentAuthor.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Comment/CommentAvatar.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Comment/CommentContent.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Comment/CommentGroup.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Comment/CommentMetadata.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Comment/CommentText.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Comment/Comment.js","webpack:///./src/templates/blog-post.tsx","webpack:///./src/components/BlogTitle.tsx","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/CardDescription.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/CardHeader.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/CardMeta.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/CardGroup.js","webpack:///./node_modules/semantic-ui-react/dist/es/views/Card/Card.js"],"names":["CommentAction","props","active","className","children","content","classes","rest","getUnhandledProps","ElementType","getElementType","createElement","isNil","handledProps","defaultProps","as","propTypes","CommentActions","CommentAuthor","CommentAvatar","src","autoGenerateKey","CommentContent","CommentGroup","collapsed","minimal","size","threaded","CommentMetadata","CommentText","Comment","Author","Action","Actions","Avatar","Content","Group","Metadata","Text","withLayout","data","post","frontmatter","html","tags","timeToRead","map","tag","key","to","recents","edges","node","extra","style","margin","fields","slug","paddingBottom","Link","header","title","vertical","border","dangerouslySetInnerHTML","__html","padded","centered","pageQuery","name","Subheader","CardDescription","textAlign","CardHeader","CardMeta","CardContent","description","meta","val","CardGroup","doubling","items","itemsPerRow","stackable","itemsJSX","item","join","_Component","Card","_getPrototypeOf2","_this","this","_len","arguments","length","args","Array","_key","call","apply","concat","e","onClick","value","_this$props","color","fluid","href","image","link","raised","handleClick","Image","create"],"mappings":"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","file":"component---src-templates-blog-post-tsx-8e4690e17a30502d1002.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A comment can contain an action.\n */\n\nfunction CommentAction(props) {\n  var active = props.active,\n      className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx(useKeyOnly(active, 'active'), className);\n  var rest = getUnhandledProps(CommentAction, props);\n  var ElementType = getElementType(CommentAction, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentAction.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\"];\nCommentAction.defaultProps = {\n  as: 'a'\n};\nCommentAction.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Style as the currently active action. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentAction;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain an list of actions a user may perform related to this comment.\n */\n\nfunction CommentActions(props) {\n  var className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx('actions', className);\n  var rest = getUnhandledProps(CommentActions, props);\n  var ElementType = getElementType(CommentActions, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentActions.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentActions.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentActions;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain an author.\n */\n\nfunction CommentAuthor(props) {\n  var className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx('author', className);\n  var rest = getUnhandledProps(CommentAuthor, props);\n  var ElementType = getElementType(CommentAuthor, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentAuthor.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentAuthor.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentAuthor;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createHTMLImage, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain an image or avatar.\n */\n\nfunction CommentAvatar(props) {\n  var className = props.className,\n      src = props.src;\n  var classes = cx('avatar', className);\n  var rest = getUnhandledProps(CommentAvatar, props);\n  var ElementType = getElementType(CommentAvatar, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createHTMLImage(src, {\n    autoGenerateKey: false\n  }));\n}\n\nCommentAvatar.handledProps = [\"as\", \"className\", \"src\"];\nCommentAvatar.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Specifies the URL of the image. */\n  src: PropTypes.string\n} : {};\nexport default CommentAvatar;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain content.\n */\n\nfunction CommentContent(props) {\n  var className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx(className, 'content');\n  var rest = getUnhandledProps(CommentContent, props);\n  var ElementType = getElementType(CommentContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * Comments can be grouped.\n */\n\nfunction CommentGroup(props) {\n  var className = props.className,\n      children = props.children,\n      collapsed = props.collapsed,\n      content = props.content,\n      minimal = props.minimal,\n      size = props.size,\n      threaded = props.threaded;\n  var classes = cx('ui', size, useKeyOnly(collapsed, 'collapsed'), useKeyOnly(minimal, 'minimal'), useKeyOnly(threaded, 'threaded'), 'comments', className);\n  var rest = getUnhandledProps(CommentGroup, props);\n  var ElementType = getElementType(CommentGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentGroup.handledProps = [\"as\", \"children\", \"className\", \"collapsed\", \"content\", \"minimal\", \"size\", \"threaded\"];\nCommentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Comments can be collapsed, or hidden from view. */\n  collapsed: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Comments can hide extra information unless a user shows intent to interact with a comment. */\n  minimal: PropTypes.bool,\n\n  /** Comments can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A comment list can be threaded to showing the relationship between conversations. */\n  threaded: PropTypes.bool\n} : {};\nexport default CommentGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain metadata about the comment, an arbitrary amount of metadata may be defined.\n */\n\nfunction CommentMetadata(props) {\n  var className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx('metadata', className);\n  var rest = getUnhandledProps(CommentMetadata, props);\n  var ElementType = getElementType(CommentMetadata, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentMetadata.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentMetadata.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentMetadata;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain text.\n */\n\nfunction CommentText(props) {\n  var className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx(className, 'text');\n  var rest = getUnhandledProps(CommentText, props);\n  var ElementType = getElementType(CommentText, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentText.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentText.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentText;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\nimport CommentAction from './CommentAction';\nimport CommentActions from './CommentActions';\nimport CommentAuthor from './CommentAuthor';\nimport CommentAvatar from './CommentAvatar';\nimport CommentContent from './CommentContent';\nimport CommentGroup from './CommentGroup';\nimport CommentMetadata from './CommentMetadata';\nimport CommentText from './CommentText';\n/**\n * A comment displays user feedback to site content.\n */\n\nfunction Comment(props) {\n  var className = props.className,\n      children = props.children,\n      collapsed = props.collapsed,\n      content = props.content;\n  var classes = cx(useKeyOnly(collapsed, 'collapsed'), 'comment', className);\n  var rest = getUnhandledProps(Comment, props);\n  var ElementType = getElementType(Comment, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nComment.handledProps = [\"as\", \"children\", \"className\", \"collapsed\", \"content\"];\nComment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Comment can be collapsed, or hidden from view. */\n  collapsed: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nComment.Author = CommentAuthor;\nComment.Action = CommentAction;\nComment.Actions = CommentActions;\nComment.Avatar = CommentAvatar;\nComment.Content = CommentContent;\nComment.Group = CommentGroup;\nComment.Metadata = CommentMetadata;\nComment.Text = CommentText;\nexport default Comment;","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport { get } from \"lodash\";\nimport { Header, Container, Segment, Icon, Label, Button, Grid, Card, Image, Item, Comment } from \"semantic-ui-react\";\nimport { MarkdownRemark, ImageSharp, MarkdownRemarkConnection, Site } from \"../graphql-types\";\nimport BlogTitle from \"../components/BlogTitle\";\nimport { DiscussionEmbed } from \"disqus-react\";\nimport {withLayout, LayoutProps} from \"../components/Layout\";\nimport { graphql } from \"gatsby\";\n\ninterface BlogPostProps extends LayoutProps {\n  data: {\n    post: MarkdownRemark;\n    recents: MarkdownRemarkConnection;\n    site: Site\n  };\n}\n\nconst BlogPostPage = (props: BlogPostProps) => {\n  const { frontmatter, html, timeToRead } = props.data.post;\n\n  const tags = props.data.post.frontmatter.tags\n    .map((tag) => <Label key={tag}><Link to={`/blog/tags/${tag}/`}>{tag}</Link></Label>);\n\n  const recents = props.data.recents.edges\n    .map(({ node }) => {\n      const extra = (\n        <Comment.Group>\n          <Comment>\n            <Comment.Content>\n              <Comment.Metadata style={{ margin: 0 }}>\n                {node.timeToRead} min read\n              </Comment.Metadata>\n            </Comment.Content>\n          </Comment>\n        </Comment.Group>\n      );\n\n      return (\n        <div key={node.fields.slug} style={{ paddingBottom: \"1em\" }}>\n          <Card as={Link}\n            to={node.fields.slug}\n            header={node.frontmatter.title}\n            extra={extra}\n          />\n        </div>\n      );\n    });\n\n  return (\n    <Container>\n      <BlogTitle />\n      <Segment vertical style={{ border: \"none\" }}>\n        <Header as=\"h1\">{frontmatter.title}</Header>\n      </Segment>\n      <Segment vertical\n        style={{ border: \"none\" }}\n        dangerouslySetInnerHTML={{\n          __html: html,\n        }}\n      />\n      <Segment vertical>\n        {tags}\n      </Segment>\n      <Segment vertical>\n        <Grid padded centered>\n          {recents}\n        </Grid>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default withLayout(BlogPostPage);\n\nexport const pageQuery = graphql`\n  query TemplateBlogPost($slug: String!) {\n  site: site {\n    siteMetadata {\n        disqus\n    }\n  }\n  post: markdownRemark(fields: {slug: {eq: $slug}}) {\n    html\n    excerpt\n    timeToRead\n    fields {\n      slug\n    }\n    frontmatter {\n      tags\n      title\n      updatedDate(formatString: \"MMM D, YYYY\")\n    }\n  }\n  recents: allMarkdownRemark(\n    filter: {\n      fields: {slug: {ne: $slug}}\n      frontmatter: {draft: {ne: true}},\n      fileAbsolutePath: {regex: \"/blog/\"},\n    },\n    sort: {order: DESC, fields: [frontmatter___updatedDate]},\n    limit: 4\n  ) {\n    edges {\n      node {\n        fields {\n          slug\n        }\n        timeToRead\n        frontmatter {\n          title\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n}\n`;\n","import * as React from \"react\";\nimport { Header, Segment, Icon } from \"semantic-ui-react\";\n\nexport default () => {\n  return (\n    <Segment vertical>\n      <Header as=\"h2\">\n        <Icon name=\"newspaper\" />\n        <Header.Content>\n          Common Cent$ Blog\n            <Header.Subheader>\n            Common sense ain't common. - Will Roger\n            </Header.Subheader>\n        </Header.Content>\n      </Header>\n    </Segment>\n  );\n};\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a description with one or more paragraphs.\n */\n\nfunction CardDescription(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'description', className);\n  var rest = getUnhandledProps(CardDescription, props);\n  var ElementType = getElementType(CardDescription, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardDescription.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardDescription.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardDescription;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a header.\n */\n\nfunction CardHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'header', className);\n  var rest = getUnhandledProps(CardHeader, props);\n  var ElementType = getElementType(CardHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card header can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain content metadata.\n */\n\nfunction CardMeta(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'meta', className);\n  var rest = getUnhandledProps(CardMeta, props);\n  var ElementType = getElementType(CardMeta, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardMeta.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card meta can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardMeta;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useWidthProp } from '../../lib';\nimport Card from './Card';\n/**\n * A group of cards.\n */\n\nfunction CardGroup(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      doubling = props.doubling,\n      items = props.items,\n      itemsPerRow = props.itemsPerRow,\n      stackable = props.stackable,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(doubling, 'doubling'), useKeyOnly(stackable, 'stackable'), useTextAlignProp(textAlign), useWidthProp(itemsPerRow), 'cards', className);\n  var rest = getUnhandledProps(CardGroup, props);\n  var ElementType = getElementType(CardGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  var itemsJSX = _map(items, function (item) {\n    var key = item.key || [item.header, item.description].join('-');\n    return React.createElement(Card, _extends({\n      key: key\n    }, item));\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), itemsJSX);\n}\n\nCardGroup.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"content\", \"doubling\", \"items\", \"itemsPerRow\", \"stackable\", \"textAlign\"];\nCardGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A group of cards can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A group of cards can double its column width for mobile. */\n  doubling: PropTypes.bool,\n\n  /** Shorthand array of props for Card. */\n  items: customPropTypes.collectionShorthand,\n\n  /** A group of cards can set how many cards should exist in a row. */\n  itemsPerRow: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A group of cards can automatically stack rows to a single columns on mobile devices. */\n  stackable: PropTypes.bool,\n\n  /** A card group can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardGroup;","import \"core-js/modules/es6.string.link\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\nimport Image from '../../elements/Image';\nimport CardContent from './CardContent';\nimport CardDescription from './CardDescription';\nimport CardGroup from './CardGroup';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card displays site content in a manner similar to a playing card.\n */\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (e) {\n      var onClick = _this.props.onClick;\n      if (onClick) onClick(e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          centered = _this$props.centered,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          content = _this$props.content,\n          description = _this$props.description,\n          extra = _this$props.extra,\n          fluid = _this$props.fluid,\n          header = _this$props.header,\n          href = _this$props.href,\n          image = _this$props.image,\n          link = _this$props.link,\n          meta = _this$props.meta,\n          onClick = _this$props.onClick,\n          raised = _this$props.raised;\n      var classes = cx('ui', color, useKeyOnly(centered, 'centered'), useKeyOnly(fluid, 'fluid'), useKeyOnly(link, 'link'), useKeyOnly(raised, 'raised'), 'card', className);\n      var rest = getUnhandledProps(Card, this.props);\n      var ElementType = getElementType(Card, this.props, function () {\n        if (onClick) return 'a';\n      });\n\n      if (!childrenUtils.isNil(children)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          href: href,\n          onClick: this.handleClick\n        }), children);\n      }\n\n      if (!childrenUtils.isNil(content)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          href: href,\n          onClick: this.handleClick\n        }), content);\n      }\n\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), Image.create(image, {\n        autoGenerateKey: false\n      }), (description || header || meta) && React.createElement(CardContent, {\n        description: description,\n        header: header,\n        meta: meta\n      }), extra && React.createElement(CardContent, {\n        extra: true\n      }, extra));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\n_defineProperty(Card, \"Content\", CardContent);\n\n_defineProperty(Card, \"Description\", CardDescription);\n\n_defineProperty(Card, \"Group\", CardGroup);\n\n_defineProperty(Card, \"Header\", CardHeader);\n\n_defineProperty(Card, \"Meta\", CardMeta);\n\n_defineProperty(Card, \"handledProps\", [\"as\", \"centered\", \"children\", \"className\", \"color\", \"content\", \"description\", \"extra\", \"fluid\", \"header\", \"href\", \"image\", \"link\", \"meta\", \"onClick\", \"raised\"]);\n\nexport { Card as default };\nCard.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A Card can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A Card can be formatted to display different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** Shorthand for primary content of CardContent. */\n  extra: customPropTypes.contentShorthand,\n\n  /** A Card can be formatted to take up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Render as an `a` tag instead of a `div` and adds the href attribute. */\n  href: PropTypes.string,\n\n  /** A card can contain an Image component. */\n  image: customPropTypes.itemShorthand,\n\n  /** A card can be formatted to link to other content. */\n  link: PropTypes.bool,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /**\n   * Called on click. When passed, the component renders as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func,\n\n  /** A Card can be formatted to raise above the page. */\n  raised: PropTypes.bool\n} : {};"],"sourceRoot":""}